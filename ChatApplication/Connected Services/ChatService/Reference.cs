//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ChatApplication.ChatService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ChatService.IChatService", CallbackContract=typeof(ChatApplication.ChatService.IChatServiceCallback))]
    public interface IChatService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/Register", ReplyAction="http://tempuri.org/IChatService/RegisterResponse")]
        void Register(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/Register", ReplyAction="http://tempuri.org/IChatService/RegisterResponse")]
        System.Threading.Tasks.Task RegisterAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/UnRegister", ReplyAction="http://tempuri.org/IChatService/UnRegisterResponse")]
        void UnRegister(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/UnRegister", ReplyAction="http://tempuri.org/IChatService/UnRegisterResponse")]
        System.Threading.Tasks.Task UnRegisterAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/SendMessage", ReplyAction="http://tempuri.org/IChatService/SendMessageResponse")]
        void SendMessage(string message, string clientName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/SendMessage", ReplyAction="http://tempuri.org/IChatService/SendMessageResponse")]
        System.Threading.Tasks.Task SendMessageAsync(string message, string clientName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/SendFile", ReplyAction="http://tempuri.org/IChatService/SendFileResponse")]
        void SendFile(byte[] fileData, string fileName, string clientName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/SendFile", ReplyAction="http://tempuri.org/IChatService/SendFileResponse")]
        System.Threading.Tasks.Task SendFileAsync(byte[] fileData, string fileName, string clientName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/MessageReceived", ReplyAction="http://tempuri.org/IChatService/MessageReceivedResponse")]
        void MessageReceived(string message, string clientName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/FileReceived", ReplyAction="http://tempuri.org/IChatService/FileReceivedResponse")]
        void FileReceived(byte[] file, string fileName, string clientName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/ClientRegistered", ReplyAction="http://tempuri.org/IChatService/ClientRegisteredResponse")]
        void ClientRegistered(string clientName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/ClientUnRegistered", ReplyAction="http://tempuri.org/IChatService/ClientUnRegisteredResponse")]
        void ClientUnRegistered(string clientName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatServiceChannel : ChatApplication.ChatService.IChatService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChatServiceClient : System.ServiceModel.DuplexClientBase<ChatApplication.ChatService.IChatService>, ChatApplication.ChatService.IChatService {
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void Register(string name) {
            base.Channel.Register(name);
        }
        
        public System.Threading.Tasks.Task RegisterAsync(string name) {
            return base.Channel.RegisterAsync(name);
        }
        
        public void UnRegister(string name) {
            base.Channel.UnRegister(name);
        }
        
        public System.Threading.Tasks.Task UnRegisterAsync(string name) {
            return base.Channel.UnRegisterAsync(name);
        }
        
        public void SendMessage(string message, string clientName) {
            base.Channel.SendMessage(message, clientName);
        }
        
        public System.Threading.Tasks.Task SendMessageAsync(string message, string clientName) {
            return base.Channel.SendMessageAsync(message, clientName);
        }
        
        public void SendFile(byte[] fileData, string fileName, string clientName) {
            base.Channel.SendFile(fileData, fileName, clientName);
        }
        
        public System.Threading.Tasks.Task SendFileAsync(byte[] fileData, string fileName, string clientName) {
            return base.Channel.SendFileAsync(fileData, fileName, clientName);
        }
    }
}
